// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const STATE = 
  {
    Harvested: 0,
    Processed: 1,
    Packed: 2,
    ForSale: 3,
    Sold: 4,
    Shipped: 5,
    Received: 6,
    Purchased: 7
    }

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    let supplyChain;

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])
    

    it("Assign Roles/Add supplyChain", async() => {
        supplyChain = await SupplyChain.deployed();
    //     let result = await supplyChain.addDistributor(distributorID);
    //     console.log('1 result', result.logs)
    //     assert.equal(result.logs[0].event, "DistributorAdded");

    //     result = await supplyChain.addRetailer(retailerID);
    //     console.log('2 result', result.logs)

    //     assert.equal(result.logs[0].event, "RetailerAdded");
    //     result = await supplyChain.addConsumer(consumerID);
    //     assert.equal(result.logs[0].event, "ConsumerAdded");
    //     result = await supplyChain.addFarmer(originFarmerID);
    //     assert.equal(result.logs[0].event, "FarmerAdded");

    });

    // beforeEach(async () => {
    //     supplyChain = await SupplyChain.deployed();
    // })

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {

        // Mark an item as Harvested by calling function harvestItem()
        const { logs } = await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Invalid item State')
        assert.equal(logs[0].event, "Harvested", 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {

        await supplyChain.addFarmer(originFarmerID);
        const { logs } = await supplyChain.processItem(upc,  {from: originFarmerID})
        // Retrieve the just now saved item from blockchain by calling function fetchItem()

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        itemState = STATE.Processed // 
        assert.equal(resultBufferTwo[5], itemState, 'Invalid item state');
        assert.equal(logs[0].event, 'Processed', 'Invalid event emitted')  
        
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        // console.log(supplyChain)
        // Declare and Initialize a variable for event
        // await supplyChain.addFarmer.call(originFarmerID);
        
        // Watch the emitted event Packed()
        const eventPacked = 'Packed'

        // Mark an item as Packed by calling function packItem()
        const { logs } = await supplyChain.packItem(upc, {from: originFarmerID})


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        itemState = STATE.Packed // 
        assert.equal(resultBufferTwo[5], itemState, 'Invalid item state');
        assert.equal(logs[0].event, eventPacked, 'Invalid event emitted')  
        
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        
        // Verify the result set
        const eventForSale = 'ForSale'

        // Mark an item as Packed by calling function packItem()
        const { logs } = await supplyChain.sellItem(upc, productPrice, {from: originFarmerID})
        itemState = STATE.ForSale // 

        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        assert.equal(resultBufferTwo[4], productPrice, 'Invalid item price');
        assert.equal(resultBufferTwo[5], itemState, 'Invalid item state');
        assert.equal(logs[0].event, eventForSale, 'Invalid event emitted')  
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        
        await supplyChain.addDistributor(distributorID);

        const eventSold = 'Sold'

        // Mark an item as Packed by calling function packItem()
        const { logs } = await supplyChain.buyItem(upc,  {from: distributorID, value: productPrice })
        itemState = STATE.Sold // 


        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);

        assert.equal(resultBufferOne[2], distributorID, 'Invalid Owner ID');
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Invalid distributor ID');
        assert.equal(resultBufferTwo[5], itemState, 'Invalid item state');
        assert.equal(logs[0].event, eventSold, 'Invalid event emitted')  
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        
        // Declare and Initialize a variable for event
        const eventShipped = 'Shipped'

        // Mark an item as Packed by calling function packItem()
        const { logs } = await supplyChain.shipItem(upc,  {from: distributorID})
        itemState = STATE.Shipped // 


        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
        
        // Watch the emitted event Shipped()
        

        // Mark an item as Sold by calling function shipItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        assert.equal(resultBufferTwo[5], itemState, 'Invalid item state');
        assert.equal(logs[0].event, eventShipped, 'Invalid event emitted')  
    
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        await supplyChain.addRetailer(retailerID);

        const event = 'Received'

        // Mark an item as Packed by calling function packItem()
        const { logs } = await supplyChain.receiveItem(upc,  {from: retailerID})
        itemState = STATE.Received // 


        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);       
        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
        
        // Watch the emitted event Shipped()
        

        // Mark an item as Sold by calling function shipItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
        assert.equal(resultBufferOne[2], retailerID, 'Invalid owner ID');
        assert.equal(resultBufferTwo.retailerID, retailerID, 'Invalid retailer ID');
        assert.equal(resultBufferTwo[5], itemState, 'Invalid item state');
        assert.equal(logs[0].event, event, 'Invalid event emitted')  
    
        // Declare and Initialize a variable for event
        
        
        // Watch the emitted event Received()
        

        // Mark an item as Sold by calling function receiveItem()
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        

        // Verify the result set
             
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        await supplyChain.addConsumer(consumerID);

        const event = 'Purchased'

        // Mark an item as Packed by calling function packItem()
        const { logs } = await supplyChain.purchaseItem(upc,  {from: consumerID})
        itemState = STATE.Purchased // 


        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);       
        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
        
        assert.equal(resultBufferOne.ownerID, consumerID, 'Invalid owner ID');
        assert.equal(resultBufferTwo.consumerID, consumerID, 'Invalid retailer ID');
        assert.equal(resultBufferTwo[5], itemState, 'Invalid item state');
        assert.equal(logs[0].event, event, 'Invalid event emitted')  

    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Invalid itemSKU');
        assert.equal(resultBufferOne[1], upc, 'Invalid itemUPC');
        assert.equal(resultBufferOne[2], consumerID, 'Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Invalid originFarmLongitude');
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChainNew = await SupplyChain.deployed()

        const resultBufferTwo = await supplyChainNew.fetchItemBufferTwo(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Invalid itemSKU');
        assert.equal(resultBufferTwo[1], upc, 'Invalid itemUPC');
        assert.equal(resultBufferTwo[2], productID, 'Invalid productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Invalid productNotes');
        assert.equal(resultBufferTwo[4], productPrice, 'Invalid productPrice');
        assert.equal(resultBufferTwo[5], itemState, 'Invalid itemState');
        assert.equal(resultBufferTwo.distributorID, distributorID, 'Invalid distributorID');
        assert.equal(resultBufferTwo.retailerID, retailerID, 'Invalid retailerID');
        assert.equal(resultBufferTwo.consumerID, consumerID, 'Invalid consumerID');
    })

});

